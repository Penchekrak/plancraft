Here are some useful programs written with Python and JAX.
Please, when writing your own functions DO NOT use env variable directly and DO NOT use executor interface, generate a list of actions to do with following functions:

def act_DO(env):
    """Either collect a block or attack a mob"""

def act_PLACE_STONE(env):
    """places a stone block in front of a player"""

def act_PLACE_TABLE(env):
    """places crafting table block in front of a player"""

def act_PLACE_FURNACE(env):
    """places furnace in front of a player"""

def act_PLACE_PLANT(env):
    """seed a plant in front of player"""

def act_MAKE_WOOD_PICKAXE(env):
    """craft wooden pickaxe in your inventory"""

def act_MAKE_STONE_PICKAXE(env):
    """craft stone pickaxe in your inventory"""

def act_MAKE_IRON_PICKAXE(env):
    """craft iron pickaxe in your inventory"""

def act_MAKE_WOOD_SWORD(env):
    """craft wood sword in your inventory"""

def act_MAKE_STONE_SWORD(env):
    """craft stone sword in your inventory"""

def act_MAKE_IRON_SWORD(env):
    """craft iron sword in your inventory"""

def act_MAKE_DIAMOND_PICKAXE(env):
    """craft diamond pickaxe in your inventory"""

def act_MAKE_DIAMOND_SWORD(env):
    """craft diamond sword in your inventory"""

def act_MAKE_IRON_ARMOUR(env):
    """craft single iron armour piece in your inventory"""

def act_MAKE_DIAMOND_ARMOUR(env):
    """craft single diamond armour piece in your inventory"""

## ITEMS

def check_inventory_wood(env):
    """Returns the number of wood in the inventory."""

def check_inventory_stone(env):
    """Returns the number of stone in the inventory."""

def check_inventory_coal(env):
    """Returns the number of coal in the inventory."""

def check_inventory_iron(env):
    """Returns the number of iron in the inventory."""

def check_inventory_diamond(env):
    """Returns the number of diamonds in the inventory."""

def check_inventory_sapling(env):
    """Returns the number of saplings in the inventory."""

def check_inventory_bow(env):
    """Returns the number of bows in the inventory."""

def check_inventory_arrows(env):
    """Returns the number of arrows in the inventory."""

def check_inventory_torches(env):
    """Returns the number of torches in the inventory."""

def check_inventory_ruby(env):
    """Returns the number of rubies in the inventory."""

def check_inventory_sapphire(env):
    """Returns the number of sapphires in the inventory."""

def check_inventory_books(env):
    """Returns the number of books in the inventory."""

## PICKAXES

def check_inventory_wood_pickaxe(env) -> bool:
    """Returns True if the player has a wood pickaxe or better in the inventory, False otherwise."""

def check_inventory_stone_pickaxe(env) -> bool:
    """Returns True if the player has a stone pickaxe or better in the inventory, False otherwise."""

def check_inventory_iron_pickaxe(env) -> bool:
    """Returns True if the player has a iron pickaxe or better in the inventory, False otherwise."""

def check_inventory_diamond_pickaxe(env) -> bool:
    """Returns True if the player has a diamond pickaxe or better in the inventory, False otherwise."""

## SWORDS

def check_inventory_wood_sword(env) -> bool:
    """Returns True if the player has a wood sword or better in the inventory, False otherwise."""

def check_inventory_stone_sword(env) -> bool:
    """Returns True if the player has a stone sword or better in the inventory, False otherwise."""

def check_inventory_iron_sword(env) -> bool:
    """Returns True if the player has a iron sword or better in the inventory, False otherwise."""

def check_inventory_diamond_sword(env) -> bool:
    """Returns True if the player has a diamond sword or better in the inventory, False otherwise."""

## BLOCK ON MAP

def check_forward_block(env) -> BlockType:
    “””Returns the block type in front of the player”””


def mine_block(env, block_type: BlockType, count: int = 1, max_iter: int = 25):
"""
Mines or crafts a specified number of blocks of a given type within an environment.
Parameters:
env : object
The environment in which block mining and crafting occur.
block_type : BlockType
The type of block to be mined (e.g., ‘BlockType.STONE’). Must match available resources in the environment.
count : int, optional
The number of blocks to mine or craft. The function continues mining until the specified number is reached (default is 1).
max_iter : int, optional The maximum number of iterations the function will attempt before stopping (default is 25).

Returns: int Returns the number of blocks that were successfully mined or crafted.

Note: The function includes `explore_until`, so it should not be called separately before this function.
 """




@@@@@@@@

There are only these types of resources (BlockType arguments):
INVALID
OUT_OF_BOUNDS
GRASS
WATER
STONE
TREE
WOOD
PATH
COAL
IRON
DIAMOND
CRAFTING_TABLE
FURNACE
SAND
LAVA
PLANT


In order to plan your actions in a meaningful way I will provide you with dependencies for crafting items.
{
  "items": {
    "crafting_table": {
      "materials": {
        "wood": 2
      },
      "requires": [],
      "level": 1
    },
    "furnace": {
      "materials": {
        "stone": 2
      },
      "requires": [],
      "level": 1
    },
    "wood_pickaxe": {
      "materials": {
        "wood": 1
      },
      "requires": ["crafting_table"],
      "level": 1
    },
    "stone_pickaxe": {
      "materials": {
        "wood": 1,
        "stone": 1
      },
      "requires": ["crafting_table"],
      "level": 2
    },
    "iron_pickaxe": {
      "materials": {
        "wood": 1,
        "stone": 1,
        "coal": 1,
        "iron": 1
      },
      "requires": ["crafting_table", "furnace"],
      "level": 3
    },
    "diamond_pickaxe": {
      "materials": {
        "wood": 1,
        "diamond": 3
      },
      "requires": ["crafting_table"],
      "level": 4
    },
    "wood_sword": {
      "materials": {
        "wood": 1
      },
      "requires": ["crafting_table"],
      "level": 1
    },
    "stone_sword": {
      "materials": {
        "wood": 1,
        "stone": 1
      },
      "requires": ["crafting_table"],
      "level": 2
    },
    "iron_sword": {
      "materials": {
        "wood": 1,
        "stone": 1,
        "coal": 1,
        "iron": 1
      },
      "requires": ["crafting_table", "furnace"],
      "level": 3
    },
    "diamond_sword": {
      "materials": {
        "wood": 1,
        "diamond": 2
      },
      "requires": ["crafting_table"],
      "level": 4
    }
}

For example:

 "stone_pickaxe": {
      "materials": {
        "wood": 1,
        "stone": 1
      },
      "requires": ["crafting_table"],
      "level": 2
    }

– means that for crafting stone pickaxe you need to have a crafting table in front of you and 1 wood and 1 stone in your inventory. Level 2 here means that you need to craft a crafting table first, AND ONLY THEN craft stone pickaxe.


At each round of conversation, I will give you
Execution error: …
Chat log: ...
Level (depth-wise): …
Nearby blocks: …
Health: …
Hunger: …
Water: …
Energy: …
Position: …
Equipment: …
Task: …
Critique: …

You should then respond to me with
Explain (if applicable): Are there any steps missing in your plan? Why does the code not complete the task? What does the chat log and execution error imply?
Plan: How to complete the task step by step. You should pay attention to Inventory since it tells what you have. The task completeness check is also based on your final inventory. While planning, make sure that you would be able to execute planned action: count resources needed, and manage it wisely.
Code:
    1) Write a SINGLE function taking the env as the only argument.
    2) Do not forget to check that you have all necessary equipment (materials or tools) before crafting something using functions like check_inventory_wood(env)’.
    3) Reuse the above useful programs as much as possible
        - Use `mine_block(env, block_type: BlockType, count: int = 1, max_iter: int = 25)` to collect blocks. Do not use `executor(env, [action])` directly.

    4) Your function will be reused for building more complex functions. Therefore, you should make it generic and reusable. You should not make strong assumption about the inventory (as it may be changed at a later time), and therefore you should always check whether you have the required items before using them. If not, you should first collect the required items and reuse the above useful programs. Also, make sure before crafting anything that you have a crafting table nearby you.
    5) Functions in the "Code from the last round" section will not be saved or executed. Do not reuse functions listed there.
    6) Anything defined outside a function will be ignored, define all your variables inside your functions.
    7) Do not write infinite loops or recursive functions.
    8) Name your function in a meaningful way (can infer the task from the name).

You should only respond in the format as described below:
RESPONSE FORMAT:

Explain:
Plan:
1) ...
2) ...
3) ...
...
Code:

```python
# helper functions (only if needed, try to avoid them)
# ...

# main function after the helper functions
def your_main_function_name(env):
    # ...
    pass
```

Examples:

Task: create wood pickaxe.

Your possible answer:

Explain: we need wood for crafting wood pickaxe. So, we need to ensure that we have enough wood in order to do that. First of all, we want to obtain enough wood for a crafting table. After that we want to get enough wood for a wooden sword. If we have enough wood for crafting a table AND crafting table in front of us, then we can craft it immediately.
Plan:
1) Check amount of wood in inventory
2) Calculate the amount of wood needed for crafting a table AND sword.
3) If we do not have enough wood, mine until it is enough.
4) Make sure that we can place a crafting table in front of us.
5) Place a crafting table in front of us.
6) Craft wood pickaxe.

Code:

```python
def create_wood_pickaxe(env):
    # check how many wood we have in inventory
    wood = check_inventory_wood(env)
    # ensure that we have enough wood in inventory
    # we want to obtain 2 wood for crafting table
    # AND 1 wood for crafting pickaxe
    required_wood = 3
    if wood < required_wood:
        mine_block(env, BlockType.TREE, required_wood - wood)
    # place a crafting table in front of us
    act_PLACE_TABLE(env)
    # craft wood pickaxe
    act_MAKE_WOOD_PICKAXE(env)

```
